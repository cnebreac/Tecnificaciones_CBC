import streamlit as st
import pandas as pd
from io import BytesIO
import datetime as dt
import os

# ====== CONFIGURACI√ìN DE SESIONES DISPONIBLES ======
SESIONES = {
    "2025-10-05": "16:30",
    "2025-09-05": "16:30",
    "2025-10-11": "11:00",
    "2025-10-16": "10:00",
}

# Capacidad por categor√≠a
MAX_POR_CANASTA = 4
CATEG_MINI = "Minibasket"
CATEG_GRANDE = "Canasta grande"

# Opciones para Categor√≠a/Equipo (ed√≠talas a tu gusto)
EQUIPOS_OPCIONES = [
    "‚Äî Selecciona ‚Äî",
    "Escuela 1¬∫a√±o 2019",
    "Escuela 2¬∫a√±o 2018",
    "Benjam√≠n 1¬∫a√±o 2017",
    "Benjam√≠n 2¬∫a√±o 2016",
    "Alev√≠n 1¬∫a√±o 2015",
    "Alev√≠n 2¬∫a√±o 2014",
    "Infantil 1¬∫a√±o 2013",
    "Infantil 2¬∫a√±o 2012",
    "Cadete 1¬∫a√±o 2011",
    "Cadete 2¬∫a√±o 2010",
    "Junior 1¬∫a√±o 2009",
    "Junior 2¬∫a√±o 2008",
    "Senior",
    "Otro",
]

# ====== CHEQUEOS DE SECRETS ======
if "gcp_service_account" not in st.secrets:
    st.error("Faltan credenciales de Google en secrets: bloque [gcp_service_account].")
    st.stop()

_SID = st.secrets.get("SHEETS_SPREADSHEET_ID")
_URL = st.secrets.get("SHEETS_SPREADSHEET_URL")
_SID_BLOCK = (st.secrets.get("sheets") or {}).get("sheet_id")

if not (_SID or _URL or _SID_BLOCK):
    st.error("Configura en secrets la hoja: SHEETS_SPREADSHEET_ID o SHEETS_SPREADSHEET_URL (o [sheets].sheet_id).")
    st.stop()

# ====== AJUSTES GENERALES ======
st.set_page_config(page_title="Tecnificaciones CBC ", layout="centered")
APP_TITLE = "üèÄ Tecnificaciones CBC - Reserva de Sesiones"
ADMIN_QUERY_FLAG = "admin"

# ====== UTILS ======
def read_secret(key: str, default=None):
    try:
        return st.secrets[key]
    except Exception:
        return os.getenv(key, default)

def to_text(v):
    if v is None:
        return ""
    try:
        import math
        if isinstance(v, float) and math.isnan(v):
            return ""
    except Exception:
        pass
    if isinstance(v, bytes):
        return v.decode("utf-8", errors="ignore")
    return str(v)

def iso(d: dt.date) -> str:
    return d.isoformat()

def _norm_name(s: str) -> str:
    return " ".join((s or "").split()).casefold()

# ====== GOOGLE SHEETS ======
import gspread
from google.oauth2.service_account import Credentials

SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

def _gc():
    info = dict(st.secrets["gcp_service_account"])
    creds = Credentials.from_service_account_info(info, scopes=SCOPES)
    return gspread.authorize(creds)

SHEET_ID = _SID or _SID_BLOCK

def _open_sheet():
    gc = _gc()
    url = st.secrets.get("SHEETS_SPREADSHEET_URL")
    sid = st.secrets.get("SHEETS_SPREADSHEET_ID") or (st.secrets.get("sheets") or {}).get("sheet_id")
    if url:
        return gc.open_by_url(url)
    elif sid:
        return gc.open_by_key(sid)
    else:
        st.error("Falta SHEETS_SPREADSHEET_URL o SHEETS_SPREADSHEET_ID en secrets.")
        st.stop()

@st.cache_data(ttl=15)
def load_df(sheet_name: str) -> pd.DataFrame:
    sh = _open_sheet()
    ws = sh.worksheet(sheet_name)
    data = ws.get_all_records()
    return pd.DataFrame(data)

def append_row(sheet_name: str, values: list):
    """A√±ade la fila y, si falta la cabecera 'email', la crea al final de la fila 1."""
    sh = _open_sheet()
    ws = sh.worksheet(sheet_name)
    headers = ws.row_values(1)
    lowered = [h.strip().lower() for h in headers]
    if "email" not in lowered:
        ws.update_cell(1, len(headers) + 1, "email")
    ws.append_row(values, value_input_option="USER_ENTERED")

def get_inscripciones_por_fecha(fecha_iso: str) -> list:
    df = load_df("inscripciones")
    if df.empty:
        return []
    need = ["timestamp","fecha_iso","hora","nombre","canasta","equipo","tutor","telefono","email"]
    for c in need:
        if c not in df.columns:
            df[c] = ""
    return df[df["fecha_iso"] == fecha_iso][need].to_dict("records")

def get_waitlist_por_fecha(fecha_iso: str) -> list:
    df = load_df("waitlist")
    if df.empty:
        return []
    need = ["timestamp","fecha_iso","hora","nombre","canasta","equipo","tutor","telefono","email"]
    for c in need:
        if c not in df.columns:
            df[c] = ""
    return df[df["fecha_iso"] == fecha_iso][need].to_dict("records")

# ====== CAPACIDAD, DUPLICADOS ======
def _match_canasta(valor: str, objetivo: str) -> bool:
    v = (valor or "").strip().lower()
    o = objetivo.strip().lower()
    if o.startswith("mini"):
        return v.startswith("mini")
    if o.startswith("canasta"):
        return v.startswith("canasta")
    return v == o

def plazas_ocupadas(fecha_iso: str, canasta: str) -> int:
    ins = get_inscripciones_por_fecha(fecha_iso)
    return sum(1 for r in ins if _match_canasta(r.get("canasta",""), canasta))

def plazas_libres(fecha_iso: str, canasta: str) -> int:
    return max(0, MAX_POR_CANASTA - plazas_ocupadas(fecha_iso, canasta))

def ya_existe_en_sesion(fecha_iso: str, nombre: str) -> str | None:
    """Devuelve 'inscripciones' o 'waitlist' si el nombre ya existe en esa fecha."""
    nn = _norm_name(nombre)
    for r in get_inscripciones_por_fecha(fecha_iso):
        if _norm_name(r.get("nombre","")) == nn:
            return "inscripciones"
    for r in get_waitlist_por_fecha(fecha_iso):
        if _norm_name(r.get("nombre","")) == nn:
            return "waitlist"
    return None

# ====== PDF: JUSTIFICANTE INDIVIDUAL ======
def crear_justificante_pdf(datos: dict) -> BytesIO:
    """Genera un justificante individual (confirmada o lista de espera)."""
    from reportlab.lib.pagesizes import A4
    from reportlab.pdfgen import canvas
    from reportlab.lib.units import cm
    from reportlab.lib import colors

    buf = BytesIO()
    c = canvas.Canvas(buf, pagesize=A4)
    width, height = A4

    x = 2*cm
    y = height - 2*cm

    status_ok = (datos.get("status") == "ok")
    titulo = "Justificante de inscripci√≥n" if status_ok else "Justificante - Lista de espera"

    # Cabecera
    c.setFont("Helvetica-Bold", 16)
    c.drawString(x, y, titulo)
    y -= 0.8*cm

    c.setFont("Helvetica", 11)
    c.drawString(x, y, f"Sesi√≥n: {datos.get('fecha_txt','‚Äî')}  ¬∑  Hora: {datos.get('hora','‚Äî')}")
    y -= 0.5*cm
    c.drawString(x, y, f"Estado: {'CONFIRMADA' if status_ok else 'LISTA DE ESPERA'}")
    y -= 0.8*cm

    # Datos
    c.setFont("Helvetica", 10)
    filas = [
        ("Jugador", datos.get("nombre","‚Äî")),
        ("Canasta", datos.get("canasta","‚Äî")),
        ("Categor√≠a/Equipo", datos.get("equipo","‚Äî")),
        ("Tutor", datos.get("tutor","‚Äî")),
        ("Tel√©fono", datos.get("telefono","‚Äî")),
        ("Email", datos.get("email","‚Äî")),
    ]
    for label, value in filas:
        c.drawString(x, y, f"{label}:")
        c.setFont("Helvetica-Bold", 10)
        c.drawString(x + 4.2*cm, y, value)
        c.setFont("Helvetica", 10)
        y -= 0.6*cm

    y -= 0.4*cm
    c.setFont("Helvetica-Oblique", 9)
    c.setFillColor(colors.grey)
    c.drawString(x, y, "Conserve este justificante como comprobante de su reserva.")
    c.setFillColor(colors.black)

    c.showPage()
    c.save()
    buf.seek(0)
    return buf

# ====== PDF: LISTADOS SESI√ìN (con email en 2¬™ l√≠nea) ======
def crear_pdf_sesion(fecha_iso: str) -> BytesIO:
    """Genera un PDF con inscripciones y lista de espera (separadas por categor√≠a)."""
    from reportlab.lib.pagesizes import A4
    from reportlab.pdfgen import canvas
    from reportlab.lib.units import cm
    from reportlab.pdfbase.pdfmetrics import stringWidth

    d = dt.date.fromisoformat(fecha_iso)
    lista = get_inscripciones_por_fecha(fecha_iso)
    wl = get_waitlist_por_fecha(fecha_iso)

    ins_mini = [r for r in lista if _match_canasta(r.get("canasta",""), CATEG_MINI)]
    ins_gran = [r for r in lista if _match_canasta(r.get("canasta",""), CATEG_GRANDE)]
    wl_mini  = [r for r in wl if _match_canasta(r.get("canasta",""), CATEG_MINI)]
    wl_gran  = [r for r in wl if _match_canasta(r.get("canasta",""), CATEG_GRANDE)]

    # hora
    hora = SESIONES.get(fecha_iso, "‚Äî")
    if lista:
        hora = lista[0].get("hora", hora) or hora
    elif wl:
        hora = wl[0].get("hora", hora) or hora

    buf = BytesIO()
    c = canvas.Canvas(buf, pagesize=A4)
    width, height = A4

    # Cabecera
    fecha_txt = d.strftime("%A, %d %B %Y").capitalize()
    y = height - 2*cm
    c.setFont("Helvetica-Bold", 16)
    c.drawString(2*cm, y, f"Tecnificaci√≥n Baloncesto ‚Äî {fecha_txt} {hora}")
    y -= 0.8*cm
    c.setFont("Helvetica", 11)
    c.drawString(2*cm, y, f"Capacidad por categor√≠a: {MAX_POR_CANASTA} | Mini: {len(ins_mini)} | Grande: {len(ins_gran)}")
    y -= 1.0*cm

    # Utils texto
    def fit_text(ca, text, max_w, font="Helvetica", size=10):
        if not text: 
            return ""
        if stringWidth(text, font, size) <= max_w:
            return text
        ell = "‚Ä¶"
        ell_w = stringWidth(ell, font, size)
        t = text
        while t and stringWidth(t, font, size) + ell_w > max_w:
            t = t[:-1]
        return t + ell

    # M√°rgenes y columnas
    left   = 2.0*cm
    right  = width - 2.0*cm
    x_num  = left
    x_name = left + 0.9*cm
    x_cat  = left + 11.0*cm
    x_team = left + 14.0*cm

    # Segunda l√≠nea (debajo de cada columna):
    # - Email debajo de NOMBRE
    # - Tel√©fono debajo de CANASTA
    # - Tutor debajo de EQUIPO
    x_email = x_name
    x_tel   = x_cat
    x_tutor = x_team

    # Anchos m√°ximos
    w_name  = (x_cat  - x_name) - 0.2*cm
    w_cat   = (x_team - x_cat)  - 0.2*cm
    w_team  = (right  - x_team)

    w_email = (x_cat  - x_email) - 0.3*cm
    w_tel   = (x_team - x_tel)   - 0.3*cm
    w_tutor = (right  - x_tutor)

    # Espaciado vertical
    line_spacing        = 0.46*cm
    separator_offset    = 0.30*cm
    post_separator_gap  = 0.50*cm
    min_margin          = 3.0*cm

    def redraw_headers(y_cur, titulo=""):
        c.setFont("Helvetica-Bold", 11)
        if titulo:
            c.drawString(left, y_cur, titulo)
            y_cur -= 0.5*cm
        c.setFont("Helvetica", 10)
        c.drawString(x_num,  y_cur, "#")
        c.drawString(x_name, y_cur, "Nombre (jugador)")
        c.drawString(x_cat,  y_cur, "Canasta")
        c.drawString(x_team, y_cur, "Equipo")
        y2 = y_cur - 0.35*cm
        c.line(left, y2, right, y2)
        return y2 - 0.35*cm

    def pintar_lista(registros, titulo, y, start_idx=1):
        if not registros:
            c.setFont("Helvetica", 10)
            c.drawString(left, y, f"‚Äî Sin inscripciones en {titulo.lower()} ‚Äî")
            return y - 0.6*cm

        y = redraw_headers(y, f"{titulo}:")
        for i, r in enumerate(registros, start=start_idx):
            required_height = line_spacing + separator_offset + post_separator_gap
            if y - required_height < min_margin:
                c.showPage()
                y = height - 2*cm
                y = redraw_headers(y, f"{titulo}:")

            nombre = to_text(r.get("nombre",""))
            cat    = to_text(r.get("canasta",""))
            team   = to_text(r.get("equipo",""))
            tutor  = to_text(r.get("tutor",""))
            tel    = to_text(r.get("telefono",""))
            email  = to_text(r.get("email",""))

            # L√≠nea 1
            c.setFont("Helvetica", 10)
            c.drawString(x_num,  y, to_text(i))
            c.drawString(x_name, y, fit_text(c, nombre, w_name))
            c.drawString(x_cat,  y, fit_text(c, cat,   w_cat))
            c.drawString(x_team, y, fit_text(c, team,  w_team))

            # L√≠nea 2
            y -= line_spacing
            c.setFont("Helvetica", 9)
            c.drawString(x_email, y, "Email: " + fit_text(c, email, w_email, size=9))
            c.drawString(x_tel,   y, "Tel.: "  + fit_text(c, tel,   w_tel,   size=9))
            c.drawString(x_tutor, y, "Tutor: " + fit_text(c, tutor, w_tutor))

            # Separador + aire extra
            y -= separator_offset
            c.setLineWidth(0.3)
            c.setDash(1, 2)
            c.line(left, y, right, y)
            c.setDash()
            c.setLineWidth(1)
            y -= post_separator_gap
        return y

    # --- Inscripciones ---
    c.setFont("Helvetica-Bold", 12)
    c.drawString(left, y, "Inscripciones confirmadas:")
    y -= 0.8*cm

    grande = [r for r in lista if _match_canasta(r.get("canasta",""), CATEG_GRANDE)]
    mini   = [r for r in lista if _match_canasta(r.get("canasta",""), CATEG_MINI)]

    if not lista:
        c.setFont("Helvetica", 10)
        c.drawString(left, y, "‚Äî Sin inscripciones ‚Äî")
        y -= 0.6*cm
    else:
        y = pintar_lista(grande, "Canasta grande", y, start_idx=1)
        y = pintar_lista(mini,   "Minibasket",    y, start_idx=len(grande)+1)

    # --- Lista de espera ---
    y -= 1*cm
    c.setFont("Helvetica-Bold", 12)
    c.drawString(left, y, "Lista de espera:")
    y -= 0.8*cm

    grande_wl = [r for r in wl if _match_canasta(r.get("canasta",""), CATEG_GRANDE)]
    mini_wl   = [r for r in wl if _match_canasta(r.get("canasta",""), CATEG_MINI)]

    if not wl:
        c.setFont("Helvetica", 10)
        c.drawString(left, y, "‚Äî Vac√≠a ‚Äî")
        y -= 0.6*cm
    else:
        y = pintar_lista(grande_wl, "Canasta grande", y, start_idx=1)
        y = pintar_lista(mini_wl,   "Minibasket",    y, start_idx=len(grande_wl)+1)

    c.showPage()
    c.save()
    buf.seek(0)
    return buf

# ====== ESTADO ======
if "is_admin" not in st.session_state:
    st.session_state.is_admin = False

# ====== ADMIN O USUARIO ======
params = st.query_params
show_admin_login = params.get(ADMIN_QUERY_FLAG, ["0"])
show_admin_login = (isinstance(show_admin_login, list) and (show_admin_login[0] == "1")) or (show_admin_login == "1")

if show_admin_login:
    # ====== SOLO ADMIN ======
    st.title("üõ†Ô∏è Panel de administraci√≥n")

    if not st.session_state.is_admin:
        pwd_input = st.text_input("Contrase√±a de administrador", type="password")
        admin_secret = read_secret("ADMIN_PASS")
        if st.button("Entrar"):
            if admin_secret and pwd_input == admin_secret:
                st.session_state.is_admin = True
                st.success("Acceso concedido. Recargando‚Ä¶")
                st.rerun()
            else:
                st.error("Contrase√±a incorrecta.")
    else:
        # Panel admin real
        df_all_ins = load_df("inscripciones")
        df_all_wl  = load_df("waitlist")
        fechas_con_datos = sorted(set(df_all_ins.get("fecha_iso", []))
                                  .union(set(df_all_wl.get("fecha_iso", []))))

        if not fechas_con_datos:
            st.info("A√∫n no hay sesiones con datos.")
        else:
            opciones = {f: f"{dt.datetime.strptime(f,'%Y-%m-%d').strftime('%d/%m/%Y')}  ¬∑  {SESIONES.get(f,'‚Äî')}"
                        for f in fechas_con_datos}
            fkey_admin = st.selectbox("Selecciona sesi√≥n", options=fechas_con_datos,
                                      format_func=lambda x: opciones.get(x, x))

            ins_f = get_inscripciones_por_fecha(fkey_admin)
            wl_f  = get_waitlist_por_fecha(fkey_admin)
            df_show = pd.DataFrame(ins_f)
            df_wl   = pd.DataFrame(wl_f)

            st.write("**Inscripciones:**")
            if df_show.empty:
                st.write("‚Äî Sin inscripciones ‚Äî")
            else:
                st.dataframe(df_show, use_container_width=True)

            st.write("**Lista de espera:**")
            if df_wl.empty:
                st.write("‚Äî Vac√≠a ‚Äî")
            else:
                st.dataframe(df_wl, use_container_width=True)

            # Bot√≥n PDF sesi√≥n
            if st.button("üßæ Generar PDF (inscripciones + lista de espera)"):
                try:
                    pdf = crear_pdf_sesion(fkey_admin)
                    st.download_button(
                        label="Descargar PDF",
                        data=pdf,
                        file_name=f"sesion_{fkey_admin}.pdf",
                        mime="application/pdf"
                    )
                except ModuleNotFoundError:
                    st.error("Falta el paquete 'reportlab'. A√±√°delo a requirements.txt (l√≠nea: reportlab).")

else:
    # ====== SOLO USUARIO NORMAL ======
    st.title(APP_TITLE)

    # >>> Bienvenida y funcionamiento
    st.markdown("""
**Bienvenid@ a las Tecnificaciones CBC**  
Entrenamientos de alto enfoque en grupos muy reducidos para maximizar el aprendizaje de cada jugador/a.

**C√≥mo funcionan**  
- Cada sesi√≥n se divide en **dos grupos**: **Minibasket** y **Canasta Grande**.  
- **M√°ximo 4 jugadores por grupo** (hasta 8 por sesi√≥n).  
- Trabajo **individualizado** en: manejo de bal√≥n, finalizaciones, tiro, lectura de juego, toma de decisiones, fundamentos defensivos y coordinaci√≥n.
    """)

    # >>> Instrucciones de uso (plegadas)
    with st.expander("‚ÑπÔ∏è C√≥mo usar esta web", expanded=False):
        st.markdown("""
1. Revisa el **calendario** y elige una fecha con plazas disponibles.  
2. Selecciona la **Canasta** (Minibasket / Canasta Grande) y tu **Categor√≠a/Equipo** (**obligatorio**).  
3. Rellena los **datos del jugador y del tutor** y pulsa **Reservar**.  
4. Si la categor√≠a est√° llena, entrar√°s **autom√°ticamente en lista de espera***.  
5. Tras una reserva correcta, podr√°s **descargar tu justificante en PDF**.

\\* Si en alg√∫n momento alguien **cancela** o hay **ajustes de √∫ltima hora**, pasar√°s a tener **plaza confirmada** en esa sesi√≥n. Se te informar√° a trav√©s del **correo electr√≥nico facilitado**.
        """)

    st.divider()

    today = dt.date.today()

    # Solo sesiones futuras (>= hoy)
    fechas_disponibles = sorted(
        [f for f in SESIONES.keys() if dt.date.fromisoformat(f) >= today]
    )

    # Calendario (opcional)
    fecha_seleccionada = None
    try:
        from streamlit_calendar import calendar

        events = []
        for f in SESIONES.keys():
            fecha_dt = dt.date.fromisoformat(f)
            ocupadas_mini = plazas_ocupadas(f, CATEG_MINI)
            ocupadas_gran = plazas_ocupadas(f, CATEG_GRANDE)

            # Colores: rojo (pasada o ambas llenas), amarillo (una llena), verde (hay hueco)
            if fecha_dt < today:
                color = "#dc3545"  # pasada
            else:
                full_mini = ocupadas_mini >= MAX_POR_CANASTA
                full_gran = ocupadas_gran >= MAX_POR_CANASTA
                if full_mini and full_gran:
                    color = "#dc3545"
                elif full_mini or full_gran:
                    color = "#ffc107"
                else:
                    color = "#28a745"

            # Fondo (no para hoy)
            if fecha_dt != today:
                events.append({
                    "title": "",
                    "start": f,
                    "end": f,
                    "display": "background",
                    "backgroundColor": color,
                })

            # Etiqueta solo con hora (o "Cancelada")
            hora = SESIONES.get(f, "Cancelada")
            label = hora if hora != "Cancelada" else "Cancelada"
            events.append({
                "title": label,
                "start": f,
                "end": f,
                "display": "auto",
            })

        custom_css = """
        .fc-daygrid-day.fc-day-today { background-color: transparent !important; }
        .fc-daygrid-day.fc-day-today .fc-daygrid-day-number {
            border: 2px solid navy;
            border-radius: 50%;
            padding: 2px 6px;
            background-color: #ffffff;
            color: navy !important;
            font-weight: bold;
        }
        """

        cal = calendar(
            events=events,
            options={
                "initialView": "dayGridMonth",
                "height": 600,
                "locale": "es",
                "firstDay": 1,
            },
            custom_css=custom_css,
            key="cal",
        )

        if cal and cal.get("clickedEvent"):
            fclicked = cal["clickedEvent"].get("start")[:10]
            # Aceptar solo si es sesi√≥n v√°lida y no pasada
            if fclicked in SESIONES and dt.date.fromisoformat(fclicked) >= today:
                fecha_seleccionada = fclicked
    except Exception:
        pass

    # Si no viene del calendario, usar selectbox con solo futuras
    if not fecha_seleccionada:
        st.subheader("üìÖ Selecciona fecha")
        if fechas_disponibles:
            etiqueta = {f: f"{dt.datetime.strptime(f,'%Y-%m-%d').strftime('%d/%m/%Y')}  ¬∑  {SESIONES[f]}" for f in fechas_disponibles}
            fecha_seleccionada = st.selectbox(
                "Fechas con sesi√≥n",
                options=fechas_disponibles,
                format_func=lambda f: etiqueta[f]
            )
        else:
            st.info("De momento no hay fechas futuras disponibles.")
            st.stop()

    # Bloque de reserva
    fkey = fecha_seleccionada
    hora_sesion = SESIONES.get(fkey, "‚Äî")
    st.write(f"### Sesi√≥n del **{dt.datetime.strptime(fkey,'%Y-%m-%d').strftime('%d/%m/%Y')}** a las **{hora_sesion}**")

    libres_mini = plazas_libres(fkey, CATEG_MINI)
    libres_gran = plazas_libres(fkey, CATEG_GRANDE)

    # >>> Aviso de capacidad + info de plazas
    avisos = []
    if libres_mini <= 0:
        avisos.append("**Minibasket** est√° **COMPLETA**. Si seleccionas esta categor√≠a te apuntaremos a **lista de espera**.")
    if libres_gran <= 0:
        avisos.append("**Canasta grande** est√° **COMPLETA**. Si seleccionas esta categor√≠a te apuntaremos a **lista de espera**.")

    # Warning √∫nico si hay categor√≠as completas
    if avisos:
        st.warning("‚ö†Ô∏è " + "  \n‚Ä¢ ".join([""] + avisos))

    # Mostrar info de plazas siempre que no est√©n las dos completas
    ambas_completas = (libres_mini <= 0 and libres_gran <= 0)
    if not ambas_completas:
        if libres_mini > 0 and libres_gran <= 0:
            st.info(f"Plazas libres ¬∑ {CATEG_MINI}: {libres_mini}/{MAX_POR_CANASTA}")
        elif libres_gran > 0 and libres_mini <= 0:
            st.info(f"Plazas libres ¬∑ {CATEG_GRANDE}: {libres_gran}/{MAX_POR_CANASTA}")
        else:
            st.info(
                f"Plazas libres ¬∑ {CATEG_MINI}: {libres_mini}/{MAX_POR_CANASTA}  ¬∑  "
                f"{CATEG_GRANDE}: {libres_gran}/{MAX_POR_CANASTA}"
            )


    with st.expander("‚ÑπÔ∏è **IMPORTANTE para confirmar la reserva**", expanded=False):
        st.markdown("""
    Si **despu√©s de pulsar ‚ÄúReservar‚Äù** no aparece el bot√≥n **‚Äú‚¨áÔ∏è Descargar justificante (PDF)‚Äù**, la **reserva NO se ha completado**.  
    Revisa los campos obligatorios o vuelve a intentarlo.  
    *(En **lista de espera** tambi√©n se genera justificante, identificado como ‚ÄúLista de espera‚Äù.)*
        """)
    # =========== Formulario + Tarjeta de √©xito (con ‚Äúcelebraci√≥n‚Äù solo una vez) ===========
    placeholder = st.empty()  # donde ir√° el form o la tarjeta
    ok_flag = f"ok_{fkey}"
    ok_data_key = f"ok_data_{fkey}"
    celebrate_key = f"celebrate_{fkey}"

    if st.session_state.get(ok_flag):
        # Mostrar tarjeta de √©xito justo donde estaba el formulario
        data = st.session_state.get(ok_data_key, {})
        with placeholder.container():
            if data.get("status") == "ok":
                st.success("‚úÖ Inscripci√≥n realizada correctamente")
            else:
                st.info("‚ÑπÔ∏è Te hemos a√±adido a la lista de espera")

            st.markdown("#### Resumen")
            col1, col2 = st.columns(2)
            with col1:
                st.write(f"**Jugador:** {data.get('nombre','‚Äî')}")
                st.write(f"**Canasta:** {data.get('canasta','‚Äî')}")
                st.write(f"**Categor√≠a/Equipo:** {data.get('equipo','‚Äî')}")
            with col2:
                st.write(f"**Tutor:** {data.get('tutor','‚Äî')}")
                st.write(f"**Tel.:** {data.get('telefono','‚Äî')}")
                st.write(f"**Email:** {data.get('email','‚Äî')}")

            st.divider()
            # Bot√≥n √∫nico de descarga de justificante (PDF)
            pdf = crear_justificante_pdf(data)
            st.download_button(
                label="‚¨áÔ∏è Descargar justificante (PDF)",
                data=pdf,
                file_name=f"justificante_{data.get('fecha_iso','')}_{_norm_name(data.get('nombre','')).replace(' ','_')}.pdf",
                mime="application/pdf",
                key=f"dl_btn_{fkey}"
            )

            # Bot√≥n para hacer otra reserva
            if st.button("Hacer otra reserva", key=f"otra_{fkey}"):
                st.session_state.pop(ok_flag, None)
                st.session_state.pop(ok_data_key, None)
                st.rerun()

        # üéâ Globos y toast SOLO una vez (justo tras confirmar)
        if st.session_state.pop(celebrate_key, False) and data.get("status") == "ok":
            st.toast("‚úÖ Inscripci√≥n realizada correctamente", icon="‚úÖ")
            st.balloons()

    else:
        with placeholder.form(f"form_{fkey}", clear_on_submit=True):
            st.write("üìù Informaci√≥n del jugador")
            nombre = st.text_input("Nombre y apellidos del jugador", key=f"nombre_{fkey}")
            canasta = st.radio("Canasta", [CATEG_MINI, CATEG_GRANDE], horizontal=True)

            # Select de equipo/categor√≠a (OBLIGATORIO)
            equipo_sel = st.selectbox(
                "Categor√≠a / Equipo",
                EQUIPOS_OPCIONES,
                index=0,
                key=f"equipo_sel_{fkey}"
            )
            equipo_otro = ""
            if equipo_sel == "Otro":
                equipo_otro = st.text_input("Especifica la categor√≠a/equipo", key=f"equipo_otro_{fkey}")

            # Normalizaci√≥n de valor obligatorio
            equipo_val = ""
            if equipo_sel and equipo_sel not in ("‚Äî Selecciona ‚Äî", "Otro"):
                equipo_val = equipo_sel
            elif equipo_sel == "Otro":
                equipo_val = (equipo_otro or "").strip()

            padre = st.text_input("Nombre del padre/madre/tutor", key=f"padre_{fkey}")
            telefono = st.text_input("Tel√©fono de contacto del tutor", key=f"telefono_{fkey}")
            email = st.text_input("Email", key=f"email_{fkey}")

            # Recordatorio sutil dentro del formulario
            st.caption("Tras pulsar **Reservar**, debe aparecer el bot√≥n **‚Äú‚¨áÔ∏è Descargar justificante (PDF)‚Äù**. Si no aparece, la reserva no se ha completado.")

            enviar = st.form_submit_button("Reservar")

            if enviar:
                # Validaciones obligatorias
                errores = []
                if not nombre:
                    errores.append("**nombre del jugador**")
                if not telefono:
                    errores.append("**tel√©fono**")
                if not equipo_val:
                    errores.append("**categor√≠a/equipo** (obligatorio)")

                if errores:
                    st.error("Por favor, rellena: " + ", ".join(errores) + ".")
                else:
                    ya = ya_existe_en_sesion(fkey, nombre)
                    if ya == "inscripciones":
                        st.error("‚ùå Este jugador ya est√° inscrito en esta sesi√≥n.")
                    elif ya == "waitlist":
                        st.warning("‚ÑπÔ∏è Este jugador ya est√° en lista de espera para esta sesi√≥n.")
                    else:
                        libres_cat = plazas_libres(fkey, canasta)
                        row = [
                            dt.datetime.now().isoformat(timespec="seconds"),
                            fkey, hora_sesion, nombre, canasta,
                            (equipo_val or ""), (padre or ""), telefono, (email or "")
                        ]
                        if libres_cat <= 0:
                            # Lista de espera
                            append_row("waitlist", row)
                            st.session_state[ok_flag] = True
                            st.session_state[ok_data_key] = {
                                "status": "wait",
                                "fecha_iso": fkey,
                                "fecha_txt": dt.datetime.strptime(fkey, "%Y-%m-%d").strftime("%d/%m/%Y"),
                                "hora": hora_sesion,
                                "nombre": nombre,
                                "canasta": canasta,
                                "equipo": (equipo_val or "‚Äî"),
                                "tutor": (padre or "‚Äî"),
                                "telefono": telefono,
                                "email": (email or "‚Äî"),
                            }
                            st.cache_data.clear()
                            st.rerun()
                        else:
                            # Inscripci√≥n confirmada
                            append_row("inscripciones", row)
                            st.session_state[ok_flag] = True
                            st.session_state[ok_data_key] = {
                                "status": "ok",
                                "fecha_iso": fkey,
                                "fecha_txt": dt.datetime.strptime(fkey, "%Y-%m-%d").strftime("%d/%m/%Y"),
                                "hora": hora_sesion,
                                "nombre": nombre,
                                "canasta": canasta,
                                "equipo": (equipo_val or "‚Äî"),
                                "tutor": (padre or "‚Äî"),
                                "telefono": telefono,
                                "email": (email or "‚Äî"),
                            }
                            st.session_state[celebrate_key] = True  # ‚Üê globos solo tras confirmar
                            st.cache_data.clear()
                            st.rerun()
